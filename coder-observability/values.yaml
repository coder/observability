fullnameOverride: null
global:
  zone: svc
  metricsName: metrics

collector:
  enabled: true
  fullnameOverride: collector
  agent:
    mode: flow
    configMap:
      name: collector-config
      key: config.river
      create: false
    clustering:
      enabled: false
    extraArgs:
      - --disable-reporting=true
    mounts:
      varlog: true
      dockercontainers: true
  controller:
    type: daemonset
    podAnnotations:
      prometheus.io/scrape: "true"
  crds:
    create: false

dashboards:
  enabled: true
  fullnameOverride: dashboards
  replicas: 1
  deploymentStrategy:
    type: Recreate  # avoid MultiAttachError for standard-rwo sc
  service:
    enabled: true
  persistence:
    enabled: true
    size: 10Gi
  testFramework:
    enabled: false
  annotations:
    prometheus.io/scrape: "true" # TODO: this adds annotations to _all_ resources; can we be more specific?
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: metrics
          type: prometheus
          url: http://metrics.{{ .Release.Namespace }}.{{ $.Values.global.zone }}
          access: proxy
          isDefault: true
          editable: false
        - name: logs
          type: loki
          url: http://logs-gateway.{{ .Release.Namespace }}.{{ $.Values.global.zone }}
          access: proxy
          isDefault: false
          editable: false
  serviceAccount:
    name: grafana
  admin:
    existingSecret: grafana-admin
    userKey: username
    passwordKey: password
  grafana.ini:
    analytics:
      reporting_enabled: false
    users:
      allow_sign_up: false
  sidecar:
    dashboards:
      provider:
        disableDelete: true
        allowUiUpdates: true
      enabled: true
      labelValue: "1"

metrics:
  enabled: true
  kube-state-metrics:
    fullnameOverride: kube-state-metrics
    podAnnotations:
      prometheus.io/scrape: "true"
  server:
    fullnameOverride: metrics
    podAnnotations:
      prometheus.io/scrape: "true"
  alertmanager:
    fullnameOverride: alertmanager
    podAnnotations:
      prometheus.io/scrape: "true"
  prometheus-node-exporter:
    fullnameOverride: node-exporter
    podAnnotations:
      prometheus.io/scrape: "true"
  testFramework:
    enabled: false

  # disables scraping of metrics by the Prometheus helm chart since this is managed by the collector
  serverFiles:
    prometheus.yml:
        scrape_configs:

logs:
  enabled: true
  nameOverride: logs

  test:
    canaryServiceAddress: "http://logs-canary:3500/metrics"
    enabled: true
  fullnameOverride: logs

  minio:
    enabled: true
    fullnameOverride: logs-storage
    address: logs-storage.{{ .Release.Namespace }}.{{ .Values.global.zone}}:9000
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: "/minio/v2/metrics/cluster"

  loki:
    enterprise:
      enabled: false
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    schemaConfig:
      configs:
      - from: 2024-04-01
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: index_
          period: 24h

  lokiCanary:
    enabled: true
    annotations:
      prometheus.io/scrape: "true"

  chunksCache:
    allocatedMemory: 1024
  resultsCache:
    allocatedMemory: 1024

  # disabled scraping of logs by the Loki helm chart since this is managed by the collector
  monitoring:
    selfMonitoring:
      enabled: false
      grafanaAgent:
        installOperator: false

  gateway:
    replicas: 1
  write:
    replicas: 1
    extraArgs:
      - -log.level=debug
  read:
    replicas: 1
  backend:
    replicas: 1